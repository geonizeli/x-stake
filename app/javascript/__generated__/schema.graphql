type Balance implements Node {
  amount: String!
  id: ID!
}

type BuyCryptoOrder implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  paidAmountCents: Int!
  receivedAmount: String
  status: ProcessStatus!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for BuyCryptoOrder.
"""
type BuyCryptoOrderConnection {
  """
  A list of edges.
  """
  edges: [BuyCryptoOrderEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BuyCryptoOrderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BuyCryptoOrder!
}

input CreateBuyCryptoOrderAttributesInput {
  """
  Amount to be paid
  """
  amountCents: Int!
}

"""
Autogenerated input type of CreateBuyCryptoOrder
"""
input CreateBuyCryptoOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: CreateBuyCryptoOrderAttributesInput!
}

"""
Autogenerated return type of CreateBuyCryptoOrder
"""
type CreateBuyCryptoOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [RecordInvalid!]
  order: BuyCryptoOrder
}

input CreateSellCryptoOrderAttributesInput {
  """
  Amount to be paid
  """
  amount: String!
}

"""
Autogenerated input type of CreateSellCryptoOrder
"""
input CreateSellCryptoOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: CreateSellCryptoOrderAttributesInput!
}

"""
Autogenerated return type of CreateSellCryptoOrder
"""
type CreateSellCryptoOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [RecordInvalid!]
  order: SellCryptoOrder
}

input CreateStakeOrderAttributesInput {
  """
  Amount to be paid
  """
  amount: String!
  poolName: String!
}

"""
Autogenerated input type of CreateStakeOrder
"""
input CreateStakeOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: CreateStakeOrderAttributesInput!
}

"""
Autogenerated return type of CreateStakeOrder
"""
type CreateStakeOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [RecordInvalid!]
  order: StakeOrder
}

"""
Autogenerated input type of CreateStakeRemoveOrder
"""
input CreateStakeRemoveOrderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  order: CreateStakeOrderAttributesInput!
}

"""
Autogenerated return type of CreateStakeRemoveOrder
"""
type CreateStakeRemoveOrderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Errors encountered during execution of the mutation.
  """
  errors: [RecordInvalid!]
  order: StakeOrder
}

type DepositOrder implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  paidAmountCents: Int!
  receivedAmountCents: Int!
  status: ProcessStatus!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for DepositOrder.
"""
type DepositOrderConnection {
  """
  A list of edges.
  """
  edges: [DepositOrderEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DepositOrderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DepositOrder!
}

input DepositOrderFilterInput {
  status: [ProcessStatus!]
}

type FiatBalance implements Node {
  amountCents: Int!
  amountCurrency: String!
  id: ID!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type Mutation {
  createBuyCryptoOrder(
    """
    Parameters for CreateBuyCryptoOrder
    """
    input: CreateBuyCryptoOrderInput!
  ): CreateBuyCryptoOrderPayload
  createSellCryptoOrder(
    """
    Parameters for CreateSellCryptoOrder
    """
    input: CreateSellCryptoOrderInput!
  ): CreateSellCryptoOrderPayload
  createStakeOrder(
    """
    Parameters for CreateStakeOrder
    """
    input: CreateStakeOrderInput!
  ): CreateStakeOrderPayload
  createStakeRemoveOrder(
    """
    Parameters for CreateStakeRemoveOrder
    """
    input: CreateStakeRemoveOrderInput!
  ): CreateStakeRemoveOrderPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

input PredicateInput {
  """
  Equal
  """
  eq: String

  """
  Less than
  """
  lt: Float
}

enum ProcessStatus {
  CANCELED
  COMPLETED
  PROCESSING
}

type Query {
  buyCryptoOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BuyCryptoOrderConnection!
  currentUser: User
  depositOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: DepositOrderFilterInput

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): DepositOrderConnection!

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  sellCryptoOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SellCryptoOrderConnection!
  stakeOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filter: StakeOrderFilterInput

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StakeOrderConnection!
}

type RecordInvalid {
  fieldName: String
  fullMessages: [String!]!
  messages: [String!]
  path: [String!]
}

type SellCryptoOrder implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  paidAmount: String!
  receivedAmountCents: Int
  status: ProcessStatus!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for SellCryptoOrder.
"""
type SellCryptoOrderConnection {
  """
  A list of edges.
  """
  edges: [SellCryptoOrderEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type SellCryptoOrderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SellCryptoOrder!
}

type StakeOrder implements Node {
  amount: String!
  createdAt: ISO8601DateTime!
  id: ID!
  poolName: String!
  status: ProcessStatus!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for StakeOrder.
"""
type StakeOrderConnection {
  """
  A list of edges.
  """
  edges: [StakeOrderEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type StakeOrderEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: StakeOrder!
}

input StakeOrderFilterInput {
  amount: PredicateInput
  poolName: PredicateInput
  status: [ProcessStatus!]
}

type User {
  balance: Balance!
  email: String!
  fiatBalance: FiatBalance!
  firstName: String!
  id: ID!
  lastName: String!
  walletAddress: String
}
